name: Reusable workflow to deploy image to ECS

on:
  workflow_call:
    inputs:
      image:
        description: "Full URI of the image currently residing in ECR"
        required: true
        type: string
      role-to-assume: 
        description: "Role to assume for GitHub OICD"
        required: true
        type: string
      ecs-service: 
        description: "Name of the ECS Service"
        required: true
        type: string
      ecs-service-two: 
        description: "Name of another ECS Service"
        required: false
        type: string
    secrets:
      github-clone-pat:
        description: "GitHub PAT secret for cloning the repository in which the Task Definitions reside"
        required: true

env:
  AWS_REGION: us-east-1

permissions:
  contents: read
  id-token: write

jobs:
  prepare_ssm_params:
    name: Prepare environment variables and outputs
    runs-on: ubuntu-latest

    outputs: 
      ecs-cluster: ${{ steps.ssm-params.outputs.ecs-cluster }}
      container-name: ${{ steps.ssm-params.outputs.container-name }}

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.role-to-assume }} 
        audience: sandbox
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: no

    - name: Fetch ECS cluster name from SSM
      uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
      with:
        ssm-path: /cicdpoc/ECS_CLUSTER
        prefix: SSM_

    - name: Fetch ECS container name from SSM
      uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
      with:
        ssm-path: /cicdpoc/CONTAINER_NAME
        prefix: SSM_

    - name: Output SSM Parameters
      id: ssm-params
      run: |
        echo "::set-output name=ecs-cluster::${{ env.SSM_ECS_CLUSTER }}"
        echo "::set-output name=container-name::${{ env.SSM_CONTAINER_NAME }}"

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: prepare_ssm_params

    outputs:
      second_service: ${{ steps.second-service-check.outputs.second_service }}

    steps: 
    - name: Checkout Task Definition Repository
      uses: actions/checkout@v3
      with:
        repository: galileo-inc/cicd-poc-task-definitions
        token: ${{ secrets.github-clone-pat }}
        ref: v0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        audience: sandbox
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: no
    
    - name: Fetch container name from SSM
      uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
      with:
        ssm-path: /cicdpoc/CONTAINER_NAME
        prefix: SSM_VAR_

    - name: Fetch ECS cluster name from SSM
      uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
      with:
        ssm-path: /cicdpoc/ECS_CLUSTER
        prefix: SSM_VAR_

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definitions/task-definition.json
        container-name: ${{ needs.prepare_ssm_params.outputs.container-name }}

        image: ${{ inputs.image }}

    - name: Deploy Amazon ECS task definition
      id: deploy-task-def
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        service: ${{ inputs.ecs-service }}
        cluster: ${{ needs.prepare_ssm_params.outputs.ecs-cluster }}
        wait-for-service-stability: true
    
    - name: Check for second service
      id: second-service-check
      run: |
        if [[ "${{ inputs.ecs-service-two }}" != "" ]]
        then
          echo "::set-output name=second_service::true"
        else
          echo "::set-output name=second_service::false"
        fi
    
  #Note: second service (we could abstract this some more, but i wont for the moment)
  deploy_two:
    name: Deploy second ECS service
    runs-on: ubuntu-latest
    needs: [prepare_ssm_params, deploy]

    if: needs.deploy.outputs.second_service == 'true'
    steps: 
    - name: Checkout Task Definition Repository
      uses: actions/checkout@v3
      with:
        repository: galileo-inc/cicd-poc-task-definitions
        token: ${{ secrets.github-clone-pat }}
        ref: v0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        audience: sandbox
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: no
  
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: render-task-def-two
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definitions/task-definition-two.json
        container-name: ${{ needs.prepare_ssm_params.outputs.container-name }}
        image: ${{ inputs.image }}

    - name: Deploy Amazon ECS task definition
      id: deploy-task-def-two
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def-two.outputs.task-definition }}
        service: ${{ inputs.ecs-service-two }}
        cluster: ${{ needs.prepare_ssm_params.outputs.ecs-cluster }}
        wait-for-service-stability: true
    
